---
- name: Check if pgpass exists or not
  stat:
    path: "{{ pgpass_file | default('~/.pgpass') }}"
  become: true
  become_user: "{{ pg_owner }}"
  register: pgpass_file_exists
  no_log: "{{ disable_logging }}"

- name: Prepare regex and entry line
  set_fact:
    search_line: "{{ pg_pass_value.host | default('*') }}:{{ pg_pass_value.port | default(pg_port) }}:{{ pg_pass_value.database | default('*') }}:{{ pg_pass_value.user }}"
    pgpass_line: "{{ pg_pass_value.host | default('*') }}:{{ pg_pass_value.port | default(pg_port) }}:{{ pg_pass_value.database | default('*') }}:{{ pg_pass_value.user }}:{{ pg_pass_value.password }}"
  when:
    - input_pg_pgpass_values|length > 0

- name: Delete entries in .pgpass
  lineinfile:
    path: "{{ pgpass_file | default('~/.pgpass') }}"
    regexp: "{{ search_line | regex_escape() }}"
    state: absent
  when:
    - input_pg_pgpass_values|length > 0
    - pgpass_file_exists is defined
    - pgpass_file_exists.stat.exists
  no_log: "{{ disable_logging }}"
  become: true
  become_user: "{{ pg_owner }}"

- name: Manage entries in .pgpass
  lineinfile:
    path: "{{ pgpass_file | default('~/.pgpass') }}"
    line: "{{ pgpass_line }}"
    state: "{{ pg_pass_value.state | default('present') }}"
    create: "{{ pg_pass_value.create | default(omit) }}"
    owner: "{{ pg_owner }}"
    group: "{{ pg_owner }}"
    mode: "0600"
  when: >
    input_pg_pgpass_values|length > 0 and
    (( pgpass_file_exists is defined and pgpass_file_exists.stat.exists )
      or (pg_pass_value.create is defined and
      (pg_pass_value.create == 'true' or pg_pass_value.create == 'true'
       or pg_pass_value.create == 'True' or pg_pass_value.create )))
  no_log: "{{ disable_logging }}"
  become: true
  become_user: "{{ pg_owner }}"
