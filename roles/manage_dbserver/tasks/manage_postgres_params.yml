---
- name: Reference Postgres variables
  include_vars: "{{ pg_type }}_{{ ansible_os_family }}.yml"

- name: Check user defined parameters and update
  community.postgresql.postgresql_set:
    login_unix_socket: "{{ pg_unix_socket_directories[0] }}"
    port: "{{ pg_port }}"
    db: "{{ pg_database }}"
    login_user: "{{ pg_owner }}"
    name: "{{ line_item.name }}"
    value: "{{ line_item.value }}"
  when:
    - input_pg_postgres_conf_params|length > 0
  with_items: "{{ input_pg_postgres_conf_params }}"
  become: true
  become_user: "{{ pg_owner }}"
  loop_control:
    loop_var: line_item
  no_log: "{{ disable_logging }}"
  register: params

- name: Register the restart requirements
  set_fact:
    params_restart_required: true
  when:
    - input_pg_postgres_conf_params|length > 0
    - line_item.changed and line_item.restart_required
  with_items: "{{ params.results }}"
  loop_control:
    loop_var: line_item
  no_log: "{{ disable_logging }}"

- name: Check if we have postgres pid exists or not
  ansible.builtin.stat:
    path: "{{ pg_default_data }}/postmaster.pid"
  become: true
  register: postgres_pid_file

- name: Fetch PostgreSQL pid
  shell: |
    set -o pipefail && cat {{ pg_default_data }}/postmaster.pid  | head -1
  register: postgres_pid
  changed_when: postgres_pid|length > 0
  when: postgres_pid_file.stat.exists

- name: Reload the pg process
  ansible.builtin.command: >
    kill -HUP {{ postgres_pid.stdout }}
  when:
    - input_pg_postgres_conf_params|length > 0
    - params.changed
    - params_restart_required is defined
    - not params_restart_required
    - postgres_pid_file.stat.exists
  become: true
  become_user: "{{ pg_owner }}"

- name: Restart PostgreSQL
  import_tasks: postgres_restart.yml
  when:
    - input_pg_postgres_conf_params|length > 0
    - params.changed
    - params_restart_required is defined
    - params_restart_required
