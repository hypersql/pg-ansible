---
- name: Check if we have PG_VERSION in pg_data
  stat:
    path: "{{ pg_data }}/PG_VERSION"
  become: true
  register: pg_version_stat

- name: Verify pg_wal and accordingly add in initdb
  set_fact:
    pg_initdb_options: "{{ pg_initdb_options + ' --waldir=' + pg_wal }}"
  when: pg_wal|length > 0  and not pg_data in pg_wal

- name: Initialize database service
  when: not pg_version_stat.stat.exists
  become: true
  block:
    - name: Initialize database postgres service in RedHat
      ansible.builtin.command: >
        {{ pg_initdb }} {{ pg_initdb_options }} -D {{ pg_data }}
      when: ansible_os_family == 'RedHat'
      become: true
      become_user: "{{ pg_owner }}"

    - name: Initialize database postgres service in Debian
      ansible.builtin.command: >
        {{ pg_initdb }} {{ pg_initdb_options }} -D {{ pg_data }}
      when: ansible_os_family == 'Debian'
      become: true
      become_user: "{{ pg_owner }}"

    - name: Copy the postgresql.conf.template to the server
      template:
        src: postgresql.conf.template
        dest: "{{ pg_data }}/postgresql.auto.conf"
        owner: "{{ pg_owner }}"
        group: "{{ pg_group }}"
        mode: 0600

- name: Check if we have postgresql.auto.conf in pg_data
  stat:
    path: "{{ pg_data }}/postgresql.auto.conf"
  become: true
  register: pg_autoconf_stat

- name: Append Configuration to Changed paramaters
  when: pg_autoconf_stat.stat.exists
  become: true
  become_user: "{{ pg_owner }}"
  block:
    - name: Copy the postgresql.changed.template to the server
      template:
        src: postgresql.changed.template
        dest: "{{ pg_data }}/postgresql.tmp.conf"
        owner: "{{ pg_owner }}"
        group: "{{ pg_group }}"
        mode: 0600

    - name: Append configuration
      shell: |
        set -o pipefail &&
        first_word=$(cat {{ pg_data }}/postgresql.tmp.conf | awk '{print $1}') &&
        while IFS= read -r line; do
          word=$(echo "$line" | awk '{print $1}')
          if ! echo "${first_word[@]}" | grep "${word}"; then
            echo "$line" >> {{ pg_data }}/postgresql.bak.conf
          fi
        done < {{ pg_data }}/postgresql.auto.conf &&
        cat {{ pg_data }}/postgresql.bak.conf > {{ pg_data }}/postgresql.auto.conf &&
        cat {{ pg_data }}/postgresql.tmp.conf | tee -a {{ pg_data }}/postgresql.auto.conf
      become: true
      become_user: "{{ pg_owner }}"

    - name: Remove postgresql.bak.conf
      file:
        path: "{{ pg_data }}/postgresql.bak.conf"
        state: absent

    - name: Remove postgresql.tmp.conf
      file:
        path: "{{ pg_data }}/postgresql.tmp.conf"
        state: absent

- name: Import create_directories_after_initdb task
  import_tasks: create_directories_after_initdb.yml

- name: Enable and start systemd service
  ansible.builtin.systemd:
    name: "{{ pg_service }}"
    daemon_reload: true
    state: started
    enabled: true
    no_block: false
  when: use_system_user
  become: true

- name: Include ensure_postgresql_process.yml tasks
  include_tasks: ensure_postgresql_process.yml
  vars:
    - _postgresql_exists: ""
  when: not use_system_user

- name: Start pg process
  ansible.builtin.command: >
    {{ pg_bin_path }}/pg_ctl -D {{ pg_default_data }} start
  when:
    - not use_system_user
    - _postgresql_exists.rc is not defined or _postgresql_exists.rc != 0
  become: true
  become_user: "{{ pg_owner }}"
