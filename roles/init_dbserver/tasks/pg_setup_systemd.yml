---
- name: Gather service facts
  service_facts:

- name: Stop pg service if running
  systemd:
    name: "{{ pg_service }}"
    state: stopped
    enabled: false
  when:
    - ansible_facts.services[pg_service] is defined
    - ansible_facts.services[pg_service].state == 'running'
    - use_system_user
  become: true

- name: Include ensure_postgresql_process.yml tasks
  include_tasks: ensure_postgresql_process.yml
  vars:
    - _postgresql_exists: ""
  when: not use_system_user

- name: Stop pg process
  ansible.builtin.command: >
    {{ pg_bin_path }}/pg_ctl -D {{ pg_default_data }} stop
  when:
    - not use_system_user
    - _postgresql_exists.rc is defined
    - _postgresql_exists.rc == 0
  become: true
  become_user: "{{ pg_owner }}"

- name: Copy global systemd unit file to /etc/systemd/system
  ansible.builtin.copy:
    remote_src: true
    src: "{{ pg_systemd_global_unit_file }}"
    dest: "/etc/systemd/system/{{ pg_service }}"
    mode: 0600
    owner: root
    group: root
  become: true
  when:
    - ansible_os_family == 'RedHat'
    - use_system_user

- name: Update systemd unit file in Redhat
  ansible.builtin.lineinfile:
    path: "/etc/systemd/system/{{ pg_service }}"
    line: "{{ item.line }}"
    regexp: "{{ item.regexp }}"
    insertafter: "{{ item.insertafter | default('EOF') }}"
  become: true
  loop:
    - line: "Description=Database server {{ pg_type }} {{ pg_major_version }}"
      regexp: "^Description=.*"
    - line: "Environment=PGDATA={{ pg_default_data }}"
      regexp: "^Environment=PGDATA.*"
    - line: "PIDFile={{ pg_default_data }}/postmaster.pid"
      regexp: "^PIDFile=.*"
      insertafter: "^\\[Service\\]$"
    - line: "ExecStopPost=/usr/bin/systemctl daemon-reload"
      regexp: "^ExecStopPost=.*"
      insertafter: "^\\[Service\\]$"
    - line: "User={{ pg_owner }}"
      regexp: "^User=.*"
      insertafter: "^\\[Service\\]$"
    - line: "Group={{ pg_group }}"
      regexp: "^Group=.*"
      insertafter: "^\\[Service\\]$"
  when:
    - ansible_os_family == 'RedHat'
    - use_system_user

- name: Update systemd unit file in Debian
  ansible.builtin.lineinfile:
    path: "/lib/systemd/system/postgresql@.service"
    line: "{{ item.line }}"
    regexp: "{{ item.regexp }}"
    insertafter: "{{ item.insertafter | default('EOF') }}"
  become: true
  loop:
    - line: "Description=Database server {{ pg_type }} {{ pg_major_version }} {{ pg_instance_name }}"
      regexp: "^Description=.*"
    - line: "AssertPathExists={{ pg_default_data }}"
      regexp: "^AssertPathExists=.*"
    - line: "#RequiresMountsFor="
      regexp: "^RequiresMountsFor=.*"
    - line: "PIDFile={{ pg_default_data }}/postmaster.pid"
      regexp: "^PIDFile=.*"
      insertafter: "^\\[Service\\]$"
    - line: "ExecStart=-{{ pg_bin_path }}/pg_ctl start -D {{ pg_default_data }}"
      regexp: "^ExecStart=.*"
      insertafter: "^\\[Service\\]$"
    - line: "ExecStopPost=+/usr/bin/systemctl daemon-reload"
      regexp: "^ExecStopPost=.*"
      insertafter: "^\\[Service\\]$"
    - line: "User={{ pg_owner }}"
      regexp: "^User=.*"
      insertafter: "^\\[Service\\]$"
    - line: "Group={{ pg_group }}"
      regexp: "^Group=.*"
      insertafter: "^\\[Service\\]$"
  when:
    - ansible_os_family == 'Debian'
    - use_system_user

- name: Unlimited core file size when core_dump enable in systemd file
  ansible.builtin.lineinfile:
    path: "/etc/systemd/system/{{ pg_service }}"
    line: "{{ item.line }}"
    regexp: "{{ item.regexp }}"
    insertafter: "{{ item.insertafter | default('EOF') }}"
  become: true
  loop:
    - line: "LimitCORE=infinity"
      regexp: "^LimitCORE=.*"
      insertafter: "^\\[Service\\]$"
  when:
    - enable_core_dump|bool
    - ansible_os_family == 'RedHat'
    - use_system_user
