---
- name: Generate the pg_pgpool_user_password
  include_role:
    name: common
    tasks_from: generate_password
  vars:
    input_user: "{{ pg_pgpool_user }}"
    input_password: "{{ pg_pgpool_user_password }}"
  no_log: "{{ disable_logging }}"
  run_once: true
  when: pg_pgpool_user_password|length < 1

- name: Set pg_pgpool_user_password
  set_fact:
    pg_pgpool_user_password: "{{ input_password }}"
  when: pg_pgpool_user_password|length < 1
  run_once: true

- name: Check if there are other users
  set_fact:
    pg_pgpool_user_password: "{{ pgpool2_user.password }}"
  loop: "{{ pgpool2_user_map }}"
  loop_control:
    loop_var: pgpool2_user
  when: pgpool2_user.name == pg_pgpool_user
  register: sr_user_exist
  no_log: "{{ disable_logging }}"

- name: Add pg_pgpool_user_password if not exist in user map
  set_fact:
    pgpool2_user_map: >-
     {{ pgpool2_user_map | default([]) + [
            {
              'name' : pg_pgpool_user,
              'password' : pg_pgpool_user_password
            }
          ] }}
  run_once: true
  when:
    - pgpool2_user_map is defined
    - sr_user_exist is skipped
  no_log: "{{ disable_logging }}"

- name: Set postgres pgpool users's database cluster password
  include_role:
    name: manage_dbserver
    tasks_from: manage_users
    apply:
      delegate_to: "{{ pgpool2_primary_inventory_hostname }}"
  vars:
    input_pg_users:
      - name: "{{ pg_pgpool_user }}"
        pass: "{{ pg_pgpool_user_password }}"
        role_attr_flags: replication
        groups: pg_read_all_settings
  run_once: true
  when: pg_pgpool_user_password|length > 1

- name: Grant execute privileges on system functions to pgpool user
  include_role:
    name: manage_dbserver
    tasks_from: manage_privileges
    apply:
      delegate_to: "{{ pgpool2_primary_inventory_hostname }}"
  vars:
    input_pg_grant_privileges:
      - roles: "{{ pg_pgpool_user }}"
        database: "{{ pg_pgpool_database }}"
        privileges: execute
        schema: pg_catalog
        objects: pg_current_wal_lsn(),pg_last_wal_replay_lsn(),pg_wal_replay_resume(),pg_wal_replay_pause()
        type: function
  run_once: true
  when: pg_pgpool_user_password|length > 1

- name: Add pgpool2 database user in pgpool
  include_role:
    name: manage_pgpool2
    tasks_from: pgpool2_manage_users
  vars:
    input_pgpool2_users:
      - name: "{{ pg_pgpool_user }}"
        pass: "{{ pg_pgpool_user_password }}"
        auth: scram
  no_log: "{{ disable_logging }}"
  when: pg_pgpool_user_password|length > 1

# This task need that manage_dbserver done 'cause need password file of pg_owner as superuser
- name: Check {{ pg_superuser }} password file
  ansible.builtin.stat:
    path: "~/.pgpassfile/{{ pg_superuser }}_pass"
  become: false
  delegate_to: localhost
  register: pg_superuser_pass_file

- name: Read {{ pg_superuser }} pass
  set_fact:
    pg_superuser_password: "{{ lookup('file', '~/.pgpassfile/{{ pg_superuser }}_pass').split('\n') }}"
  become: false
  delegate_to: localhost
  when: pg_superuser_pass_file.stat.exists

- name: Add pgpool2 database user in pgpool
  include_role:
    name: manage_pgpool2
    tasks_from: pgpool2_manage_users
  vars:
    input_pgpool2_users:
      - name: "{{ pg_superuser }}"
        pass: "{{ pg_superuser_password[0] }}"
        auth: scram
  no_log: "{{ disable_logging }}"
  when: pg_superuser_password[0]|length > 0

- name: Check if pgpass exists or not
  stat:
    path: "{{ pgpass_file | default('~/.pgpass') }}"
  become: true
  become_user: "{{ pgpool2_user }}"
  register: pgpass_file_exists
  no_log: "{{ disable_logging }}"

- name: Prepare regex and entry line
  set_fact:
    pgpass_line: "*:{{ pgpool2_port }}:*:{{ pg_superuser }}:{{ pg_superuser_password[0] }}"

- name: Manage entries in .pgpass
  lineinfile:
    path: "{{ pgpass_file | default('~/.pgpass') }}"
    line: "{{ pgpass_line }}"
    state: "present"
    create: true
    owner: "{{ pgpool2_user }}"
    group: "{{ pgpool2_group }}"
    mode: "0600"
  no_log: "{{ disable_logging }}"
  become: true
  become_user: "{{ pgpool2_user }}"
