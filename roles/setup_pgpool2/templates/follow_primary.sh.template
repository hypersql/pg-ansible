#!/bin/bash
# This script is run after failover_command to synchronize the Standby with the new Primary.
# First try pg_rewind. If pg_rewind failed, use pg_basebackup.

set -o xtrace

# Special values:
# 1)  %d = node id
# 2)  %h = hostname
# 3)  %p = port number
# 4)  %D = node database cluster path
# 5)  %m = new primary node id
# 6)  %H = new primary node hostname
# 7)  %M = old main node id
# 8)  %P = old primary node id
# 9)  %r = new primary port number
# 10) %R = new primary database cluster path
# 11) %N = old primary node hostname
# 12) %S = old primary node port number
# 13) %% = '%' character

NODE_ID="$1"
NODE_HOST="$2"
NODE_PORT="$3"
NODE_PGDATA="$4"
NEW_PRIMARY_NODE_ID="$5"
NEW_PRIMARY_NODE_HOST="$6"
OLD_MAIN_NODE_ID="$7"
OLD_PRIMARY_NODE_ID="$8"
NEW_PRIMARY_NODE_PORT="$9"
NEW_PRIMARY_NODE_PGDATA="${10}"

PGHOME=/usr/pgsql-{{ pg_major_version }}
ARCHIVEDIR={{ pg_local_wal_archive_dir }}
WALDIR={{ pg_wal }}
REPLUSER={{ pg_replication_user }}
PCP_USER={{ pcp_admin_user }}

PGPOOL_PATH={{ pgpool2_bin_path }}
PCP_PORT={{ pgpool2_pcp_port }}
POSTGRESQL_STARTUP_USER={{ pg_owner }}
POSTGRESQL_SUPER_USER={{ pg_superuser }}
POSTGRESQL_DATABASE={{ pg_database }}
POSTGRESQL_CONF_FILE=postgresql.auto.conf
SLOT_NAMES=({{ _slot_name_array }})
PGPASSFILE={{ pgpass_file }}
SSH_KEY_FILE=id_rsa
SSH_OPTIONS="-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i ~/.ssh/${SSH_KEY_FILE}"
FAILOVER_LOG={{ pgpool2_logdir }}/failover.log
CHECK_PG_READY_RETRY_COUNT=60
CHECK_PG_READY_RETRY_INTERVAL=5

echo follow_primary.sh: start: Standby node ${NODE_ID} >> ${FAILOVER_LOG}

# Check the connection status of Standby
PG_ISREADY=0
SET=$(seq 1 ${CHECK_PG_READY_RETRY_COUNT})
for i in ${SET}
do
    echo follow_primary.sh: check pg_isready on node_id=${NODE_ID}, try_cnt=${i} >> ${FAILOVER_LOG}
    ${PGHOME}/bin/pg_isready -h ${NODE_HOST} -p ${NODE_PORT} > /dev/null 2>&1
    result=$?
    if [[ $result == 0 ]]; then
        PG_ISREADY=1
        break
    else
        sleep ${CHECK_PG_READY_RETRY_INTERVAL}
    fi
done

if [ $PG_ISREADY -ne 1 ]; then
    echo follow_primary.sh: node_id=${NODE_ID} is not running. skipping follow primary command >> ${FAILOVER_LOG}
    exit 0
else
    echo follow_primary.sh: node_id=${NODE_ID} is running. >> ${FAILOVER_LOG}
fi

# Test passwordless SSH
ssh -T ${SSH_OPTIONS} ${POSTGRESQL_STARTUP_USER}@${NEW_PRIMARY_NODE_HOST} ls /tmp > /dev/null

if [ $? -ne 0 ]; then
    echo follow_main.sh: passwordless SSH to ${POSTGRESQL_STARTUP_USER}@${NEW_PRIMARY_NODE_HOST} failed. Please setup passwordless SSH.
    exit 1
fi

# Get PostgreSQL major version
PGVERSION=`${PGHOME}/bin/initdb -V | awk '{print $3}' | sed 's/\..*//' | sed 's/\([0-9]*\)[a-zA-Z].*/\1/'`

# Synchronize Standby with the new Primary.
echo follow_primary.sh: pg_rewind for node ${NODE_ID} >> ${FAILOVER_LOG}

# Create replication slot "${SLOT_NAMES[$NODE_ID]}"

ssh -T ${SSH_OPTIONS} ${POSTGRESQL_STARTUP_USER}@${NEW_PRIMARY_NODE_HOST} "
    ${PGHOME}/bin/psql -p ${NEW_PRIMARY_NODE_PORT} -U ${POSTGRESQL_SUPER_USER} \
        -c \"SELECT pg_create_physical_replication_slot('${SLOT_NAMES[$NODE_ID]}');\"  >/dev/null 2>&1
"

if [ $? -ne 0 ]; then
    echo follow_primary.sh: create replication slot \"${SLOT_NAMES[$NODE_ID]}\" failed. You may need to create replication slot manually. >> ${FAILOVER_LOG}
fi

ssh -T ${SSH_OPTIONS} ${POSTGRESQL_STARTUP_USER}@${NODE_HOST} "

    set -o errexit

    ${PGHOME}/bin/pg_ctl -w -m f -D ${NODE_PGDATA} stop

    ${PGHOME}/bin/pg_rewind -D ${NODE_PGDATA} --source-server=\"user=${POSTGRESQL_SUPER_USER} host=${NEW_PRIMARY_NODE_HOST} port=${NEW_PRIMARY_NODE_PORT} dbname=${POSTGRESQL_DATABASE}\"

    rm -rf ${NODE_PGDATA}/pg_replslot/*

    ${PGHOME}/bin/pg_ctl -l /dev/null -w -D ${NODE_PGDATA} start

    ${PGHOME}/bin/psql -U ${POSTGRESQL_SUPER_USER} -d ${POSTGRESQL_DATABASE} -p ${NODE_PORT} \
        -c \"ALTER SYSTEM SET primary_conninfo = 'user=${REPLUSER} passfile=''${PGPASSFILE}'' host=${NEW_PRIMARY_NODE_HOST} port=${NEW_PRIMARY_NODE_PORT} application_name=${SLOT_NAMES[$NODE_ID]}'\"

    ${PGHOME}/bin/pg_ctl -D ${NODE_PGDATA} reload
"

# If start Standby successfully, attach this node
if [ $? -eq 0 ]; then

    # Run pcp_attact_node to attach Standby node to Pgpool-II.
    ${PGPOOL_PATH}/pcp_attach_node -w -h localhost -U $PCP_USER -p ${PCP_PORT} -n ${NODE_ID}

    if [ $? -ne 0 ]; then
        echo ERROR: follow_primary.sh: end: pcp_attach_node failed >> ${FAILOVER_LOG}
        exit 1
    fi

else

    # If start Standby failed, drop replication slot "${SLOT_NAMES[$NODE_ID]}"
    ssh -T ${SSH_OPTIONS} ${POSTGRESQL_STARTUP_USER}@${NEW_PRIMARY_NODE_HOST} "
        ${PGHOME}/bin/psql -p ${NEW_PRIMARY_NODE_PORT} -U ${POSTGRESQL_SUPER_USER} \
            -c \"SELECT pg_drop_replication_slot('${SLOT_NAMES[$NODE_ID]}');\"  >/dev/null 2>&1
    "

    if [ $? -ne 0 ]; then
        echo ERROR: follow_primary.sh: drop replication slot \"${SLOT_NAMES[$NODE_ID]}\" failed. You may need to drop replication slot manually. >> ${FAILOVER_LOG}
    fi

    echo ERROR: follow_primary.sh: end: follow primary command failed >> ${FAILOVER_LOG}
    exit 1
fi

echo follow_primary.sh: end: follow primary command is completed successfully >> ${FAILOVER_LOG}
exit 0